
package main

import (
	"context"
	"encoding/hex"
	"fmt"
	"github.com/xssnick/tonutils-go/address"
	_ "github.com/xssnick/tonutils-go/ton/nft"
	"github.com/xssnick/tonutils-go/tvm/cell"
	"strings"

	"github.com/xssnick/tonutils-go/liteclient"
	"github.com/xssnick/tonutils-go/tlb"
	"github.com/xssnick/tonutils-go/ton"
	"github.com/xssnick/tonutils-go/ton/wallet"
)

func main() {

	// connect to mainnet lite server
	client := liteclient.NewConnectionPool()

	configUrl := "https://ton-blockchain.github.io/testnet-global.config.json"
	
	err := client.AddConnectionsFromConfigUrl(context.Background(), configUrl)
	if err != nil {
		panic(err)
	}
	api := ton.NewAPIClient(client)
	w := getWallet(api)

	msgBody := cell.BeginCell().EndCell()

	fmt.Println("Deploying Jetton ICO	contract to mainnet...")
	addr, err := w.DeployContract(context.Background(), tlb.MustFromTON("0.02"),
		msgBody, getJettonMasterCode(), getContractData(w.Address()), true)
	if err != nil {
		panic(err)
	}

	fmt.Println("Deployed contract addr:", addr.String())
}

func getWallet(api *ton.APIClient) *wallet.Wallet {
	words := strings.Split("board raccoon gorilla learn exchange suffer pill deputy smart expand beach burst cereal pill wedding grain expand expand extend expand tent board flight smart", " ")
	w, err := wallet.FromSeed(api, words, wallet.V3)
	if err != nil {
		panic(err)
	}
	return w
}

func getJettonMasterCode() *cell.Cell {
	var hex
	codeCellBytes, _ := hex.DecodeString(hexBOC)

	codeCell, err := cell.FromBOC(codeCellBytes)
	if err != nil {
		panic(err)
	}

	return codeCell
}

func getJettonWalletCode() *cell.Cell {
	var hex
	codeCellBytes, _ := hex.DecodeString(hexBOC)

	codeCell, err := cell.FromBOC(codeCellBytes)
	if err != nil {
		panic(err)
	}

	return codeCell
}

func getContractData(OwnerAddr *address.Address) *cell.Cell {
	// storage scheme
	// storage#_ total_supply:Coins admin_address:MsgAddress content:^Cell jetton_wallet_code:^Cell = Storage;
	
	// total_supply: will be MustStoreUInt(10000000, 64)
	// admin_address: MustStoreAddr(OwnerAddr)
	// content: MustStoreStringSnake
	// jetton_wallet_code: MustStoreRef(getJettonWalletCode())
	


	uri := "https://github.com/romanovichim/TonFunClessons_ru"
	jettonContentCell := cell.BeginCell().MustStoreStringSnake(uri).EndCell()

	contentRef := cell.BeginCell().
		MustStoreRef(jettonContentCell).
		EndCell()

	data := cell.BeginCell().MustStoreUInt(10000000, 64).
		MustStoreAddr(OwnerAddr).
		MustStoreRef(contentRef).
		MustStoreRef(getJettonWalletCode()).
		EndCell()

	return data
}