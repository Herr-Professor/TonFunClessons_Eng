(function(r,a){typeof exports=="object"&&typeof module<"u"?a(exports,require("tonweb")):typeof define=="function"&&define.amd?define(["exports","tonweb"],a):(r=typeof globalThis<"u"?globalThis:r||self,a(r["ston-sdk"]={},r.TonWeb))})(this,function(r,a){"use strict";var Rt=Object.defineProperty;var Tt=(r,a,l)=>a in r?Rt(r,a,{enumerable:!0,configurable:!0,writable:!0,value:l}):r[a]=l;var d=(r,a,l)=>(Tt(r,typeof a!="symbol"?a+"":a,l),l);const l={ADD_LIQUIDITY:1935855772,SWAP:630424929,PROVIDE_LIQUIDITY:4244235663,DIRECT_ADD_LIQUIDITY:1291331587,REFUND:200537159,RESET_GAS:1117846339,COLLECT_FEES:533429565,REQUEST_BURN:1499400124},R={V1:"V1"},rt={[R.V1]:"EQB3ncyBUTjZUA5EnFKR5_EnOMI9V1tTEAAPaiU71gc4TiUt"},{Address:it}=a,W=(i,s,t)=>{let e=BigInt(0);for(let n=0;n<t;n++)e*=BigInt(2),e+=BigInt(i.get(s+n));return e},w=i=>{try{let s=W(i.bits,3,8);s>BigInt(127)&&(s=s-BigInt(256));const t=W(i.bits,3+8,256);if(s.toString(10)+":"+t.toString(16)=="0:0")return null;const e=s.toString(10)+":"+t.toString(16).padStart(64,"0");return new it(e)}catch{return null}},{boc:{Cell:k},utils:{BN:v}}=a;class E{constructor(){d(this,"createRefundBody",async(s,t)=>{const e=new k;return e.bits.writeUint(l.REFUND,32),e.bits.writeUint((t==null?void 0:t.queryId)??0,64),e});d(this,"createDirectAddLiquidityBody",async(s,t)=>{const e=new k;return e.bits.writeUint(l.DIRECT_ADD_LIQUIDITY,32),e.bits.writeUint(t.queryId??0,64),e.bits.writeCoins(new v(t.amount0)),e.bits.writeCoins(new v(t.amount1)),e.bits.writeCoins(new v(t.minimumLpToMint??1)),e});d(this,"createResetGasBody",async(s,t)=>{const e=new k;return e.bits.writeUint(l.RESET_GAS,32),e.bits.writeUint((t==null?void 0:t.queryId)??0,64),e});d(this,"getData",async s=>{const t=await s.getAddress(),e=await s.provider.call2(t.toString(),"get_lp_account_data");return{userAddress:w(e[0]),poolAddress:w(e[1]),amount0:e[2],amount1:e[3]}})}get gasConstants(){return{refund:new v(5e8),directAddLp:new v(3e8),resetGas:new v(3e8)}}}const{Contract:dt,utils:{BN:D}}=a,J={[R.V1]:E};class $ extends dt{constructor(t,{revision:e,...n}){super(t,n);d(this,"revision");if(typeof e=="string"){if(!J[e])throw Error(`Unknown account revision: ${e}`);this.revision=new J[e]}else this.revision=e}get gasConstants(){return this.revision.gasConstants}async createRefundBody(t){return this.revision.createRefundBody(this,t)}async createDirectAddLiquidityBody(t){return this.revision.createDirectAddLiquidityBody(this,t)}async createResetGasBody(t){return this.revision.createResetGasBody(this,t)}async getData(){return await this.revision.getData(this)}async buildRefundTxParams(t){const e=await this.getAddress(),n=await this.createRefundBody({queryId:t==null?void 0:t.queryId}),o=new D((t==null?void 0:t.gasAmount)??this.gasConstants.refund);return{to:e,payload:n,gasAmount:o}}async buildDirectAddLiquidityTxParams(t){const e=await this.getAddress(),n=await this.createDirectAddLiquidityBody({amount0:t.amount0,amount1:t.amount1,minimumLpToMint:t.minimumLpToMint,queryId:t.queryId}),o=new D(t.gasAmount??this.gasConstants.directAddLp);return{to:e,payload:n,gasAmount:o}}async buildResetGasTxParams(t){const e=await this.getAddress(),n=await this.createResetGasBody({queryId:t==null?void 0:t.queryId}),o=new D((t==null?void 0:t.gasAmount)??this.gasConstants.resetGas);return{to:e,payload:n,gasAmount:o}}}const{utils:{BN:P,bytesToBase64:O},boc:{Cell:T},Address:U}=a;class N{constructor(){d(this,"createCollectFeesBody",async(s,t)=>{const e=new T;return e.bits.writeUint(l.COLLECT_FEES,32),e.bits.writeUint((t==null?void 0:t.queryId)??0,64),e});d(this,"createBurnBody",async(s,t)=>{const e=new T;return e.bits.writeUint(l.REQUEST_BURN,32),e.bits.writeUint(t.queryId??0,64),e.bits.writeCoins(new P(t.amount)),e.bits.writeAddress(new U(t.responseAddress)),e});d(this,"getExpectedOutputs",async(s,t)=>{const e=new T;e.bits.writeAddress(new U(t.jettonWallet));const n=O(await e.toBoc(!1)),o=await s.getAddress(),c=await s.provider.call2(o.toString(),"get_expected_outputs",[["int",t.amount.toString()],["tvm.Slice",n]]);return{jettonToReceive:c[0],protocolFeePaid:c[1],refFeePaid:c[2]}});d(this,"getExpectedTokens",async(s,t)=>{const e=await s.getAddress();return await s.provider.call2(e.toString(),"get_expected_tokens",[["int",t.amount0.toString()],["int",t.amount1.toString()]])});d(this,"getExpectedLiquidity",async(s,t)=>{const e=await s.getAddress(),n=await s.provider.call2(e.toString(),"get_expected_liquidity",[["int",t.jettonAmount.toString()]]);return{amount0:n[0],amount1:n[1]}});d(this,"getLpAccountAddress",async(s,t)=>{const e=new T;e.bits.writeAddress(new U(t.ownerAddress));const n=O(await e.toBoc(!1)),o=await s.getAddress(),c=await s.provider.call2(o.toString(),"get_lp_account_address",[["tvm.Slice",n]]);return w(c)});d(this,"constructLpAccountRevision",s=>new E);d(this,"getData",async s=>{const t=await s.getAddress(),e=await s.provider.call2(t.toString(),"get_pool_data");return{reserve0:e[0],reserve1:e[1],token0WalletAddress:w(e[2]),token1WalletAddress:w(e[3]),lpFee:e[4],protocolFee:e[5],refFee:e[6],protocolFeeAddress:w(e[7]),collectedToken0ProtocolFee:e[8],collectedToken1ProtocolFee:e[9]}})}get gasConstants(){return{collectFees:new P(11e8),burn:new P(5e8)}}}const{Address:V,utils:{BN:M},token:{jetton:{JettonMinter:at,JettonWallet:ct}}}=a,j={[R.V1]:N};class x extends at{constructor(t,{revision:e,...n}){super(t,n);d(this,"revision");if(typeof e=="string"){if(!j[e])throw Error(`Unknown pool revision: ${e}`);this.revision=new j[e]}else this.revision=e}get gasConstants(){return this.revision.gasConstants}async createCollectFeesBody(t){return this.revision.createCollectFeesBody(this,t)}async createBurnBody(t){return this.revision.createBurnBody(this,t)}async getExpectedOutputs(t){return this.revision.getExpectedOutputs(this,t)}async getExpectedTokens(t){return this.revision.getExpectedTokens(this,t)}async getExpectedLiquidity(t){return this.revision.getExpectedLiquidity(this,t)}async getJettonWallet(t){const e=await this.getJettonWalletAddress(new V(t.ownerAddress));return new ct(this.provider,{address:e})}async getLpAccountAddress(t){return await this.revision.getLpAccountAddress(this,t)}async getLpAccount(t){const e=await this.getLpAccountAddress(t);return e?new $(this.provider,{address:e,revision:this.revision.constructLpAccountRevision(this)}):null}async getData(){return this.revision.getData(this)}async buildCollectFeeTxParams(t){const e=await this.getAddress(),n=await this.createCollectFeesBody({queryId:t==null?void 0:t.queryId}),o=new M((t==null?void 0:t.gasAmount)??this.gasConstants.collectFees);return{to:e,payload:n,gasAmount:o}}async buildBurnTxParams(t){const e=await this.getJettonWalletAddress(new V(t.responseAddress)),n=await this.createBurnBody({amount:t.amount,responseAddress:t.responseAddress,queryId:t.queryId}),o=new M((t==null?void 0:t.gasAmount)??this.gasConstants.burn);return{to:e,payload:n,gasAmount:o}}}const{utils:{BN:G},boc:{Cell:ut},Address:m}=a;function B(i){const s=new ut;return s.bits.writeUint(260734629,32),s.bits.writeUint(i.queryId,64),s.bits.writeCoins(new G(i.amount)),s.bits.writeAddress(new m(i.destination)),s.bits.writeAddress(i.responseDestination?new m(i.responseDestination):void 0),i.customPayload?(s.refs.push(i.customPayload),s.bits.writeBit(!0)):s.bits.writeBit(!1),s.bits.writeCoins(new G(i.forwardTonAmount)),i.forwardPayload?(s.refs.push(i.forwardPayload),s.bits.writeBit(!0)):s.bits.writeBit(!1),s}function I(i){return!i.isZero()}const{Address:S,utils:{BN:C,bytesToBase64:Q},boc:{Cell:b}}=a;class K{constructor(){d(this,"createSwapBody",async(s,t)=>{const e=new b;return e.bits.writeUint(l.SWAP,32),e.bits.writeAddress(new S(t.askJettonWalletAddress)),e.bits.writeCoins(new C(t.minAskAmount)),e.bits.writeAddress(new S(t.userWalletAddress)),t.referralAddress?(e.bits.writeUint(1,1),e.bits.writeAddress(new S(t.referralAddress))):e.bits.writeUint(0,1),e});d(this,"createProvideLiquidityBody",async(s,t)=>{const e=new b;return e.bits.writeUint(l.PROVIDE_LIQUIDITY,32),e.bits.writeAddress(new S(t.routerWalletAddress)),e.bits.writeCoins(new C(t.minLpOut)),e});d(this,"getPoolAddress",async(s,t)=>{const e=new b;e.bits.writeAddress(new S(t.token0));const n=new b;n.bits.writeAddress(new S(t.token1));const o=Q(await e.toBoc(!1)),c=Q(await n.toBoc(!1)),A=await s.getAddress(),u=await s.provider.call2(A.toString(),"get_pool_address",[["tvm.Slice",o],["tvm.Slice",c]]);return w(u)});d(this,"getData",async s=>{const t=await s.getAddress(),e=await s.provider.call2(t.toString(),"get_router_data",[]);return{isLocked:I(e[0]),adminAddress:w(e[1]),tempUpgrade:e[2],poolCode:e[3],jettonLpWalletCode:e[4],lpAccountCode:e[5]}});d(this,"constructPoolRevision",s=>new N)}get gasConstants(){return{swap:new C(3e8),provideLp:new C(3e8),swapForward:new C(265e6),provideLpForward:new C(265e6)}}}const{Address:Y,Contract:lt,utils:{BN:y},token:{jetton:{JettonMinter:g}}}=a,p={[R.V1]:K};class wt extends lt{constructor(t,{revision:e,...n}){super(t,n);d(this,"revision");if(typeof e=="string"){if(!p[e])throw Error(`Unknown router revision: ${e}`);this.revision=new p[e]}else this.revision=e}get gasConstants(){return this.revision.gasConstants}async createSwapBody(t){return this.revision.createSwapBody(this,t)}async createProvideLiquidityBody(t){return this.revision.createProvideLiquidityBody(this,t)}async getPoolAddress(t){return this.revision.getPoolAddress(this,t)}async getPool(t){const e=new g(this.provider,{address:t.jettonAddresses[0]}),n=new g(this.provider,{address:t.jettonAddresses[1]}),o=await this.getAddress(),c=await e.getJettonWalletAddress(o),A=await n.getJettonWalletAddress(o),u=await this.getPoolAddress({token0:c,token1:A});return u?new x(this.provider,{address:u,revision:this.revision.constructPoolRevision(this)}):null}async getData(){return await this.revision.getData(this)}async buildSwapJettonTxParams(t){const e=new g(this.provider,{address:t.offerJettonAddress}),n=new g(this.provider,{address:t.askJettonAddress}),o=await e.getJettonWalletAddress(new Y(t.userWalletAddress)),c=await n.getJettonWalletAddress(await this.getAddress()),A=await this.createSwapBody({userWalletAddress:t.userWalletAddress,minAskAmount:t.minAskAmount,askJettonWalletAddress:c,referralAddress:t.referralAddress}),u=new y(t.forwardGasAmount??this.gasConstants.swapForward),h=B({queryId:t.queryId??0,amount:t.offerAmount,destination:await this.getAddress(),forwardTonAmount:u,forwardPayload:A}),f=new y(t.gasAmount??this.gasConstants.swap);return{to:o,payload:h,gasAmount:f}}async buildSwapProxyTonTxParams(t){const e=new g(this.provider,{address:t.proxyTonAddress}),n=new g(this.provider,{address:t.askJettonAddress}),o=await e.getJettonWalletAddress(await this.getAddress()),c=await n.getJettonWalletAddress(await this.getAddress()),A=await this.createSwapBody({userWalletAddress:t.userWalletAddress,minAskAmount:t.minAskAmount,askJettonWalletAddress:c,referralAddress:t.referralAddress}),u=new y(t.forwardGasAmount??this.gasConstants.swapForward),h=B({queryId:t.queryId??0,amount:t.offerAmount,destination:await this.getAddress(),forwardTonAmount:u,forwardPayload:A}),f=new y(t.offerAmount).add(u);return{to:o,payload:h,gasAmount:f}}async buildProvideLiquidityJettonTxParams(t){const e=new g(this.provider,{address:t.sendTokenAddress}),n=new g(this.provider,{address:t.otherTokenAddress}),o=await e.getJettonWalletAddress(new Y(t.userWalletAddress)),c=await n.getJettonWalletAddress(await this.getAddress()),A=await this.createProvideLiquidityBody({routerWalletAddress:c,minLpOut:t.minLpOut}),u=new y(t.forwardGasAmount??this.gasConstants.provideLpForward),h=B({queryId:t.queryId??0,amount:t.sendAmount,destination:await this.getAddress(),forwardTonAmount:u,forwardPayload:A}),f=new y(t.gasAmount??this.gasConstants.provideLp);return{to:o,payload:h,gasAmount:f}}async buildProvideLiquidityProxyTonTxParams(t){const e=new g(this.provider,{address:t.proxyTonAddress}),n=new g(this.provider,{address:t.otherTokenAddress}),o=await e.getJettonWalletAddress(await this.getAddress()),c=await n.getJettonWalletAddress(await this.getAddress()),A=await this.createProvideLiquidityBody({routerWalletAddress:c,minLpOut:t.minLpOut}),u=new y(t.forwardGasAmount??this.gasConstants.provideLp),h=B({queryId:t.queryId??0,amount:t.sendAmount,destination:await this.getAddress(),forwardTonAmount:u,forwardPayload:A}),f=new y(t.sendAmount).add(u);return{to:o,payload:h,gasAmount:f}}}const _={STAKE:1858722917,CLAIM_REWARDS:2027548937,UNSTAKE:3106497952},q={V2:"V2"};function X(i){return new TextDecoder().decode(i.bits.getTopUppedArray())}const{utils:{BN:Z},boc:{Cell:At}}=a;class z{constructor(){d(this,"createStakeBody",async s=>{const t=new At;return t.bits.writeUint(_.STAKE,32),t});d(this,"getPendingData",async s=>{const t=await s.getAddress(),e=await s.provider.call2(t.toString(),"get_pending_data");return{changeCustodianTs:e[0],sendMsgTs:e[1],codeUpgradeTs:e[2],newCustodian:w(e[3]),pendingMsg:e[4],newCode:e[5],newStorage:e[6]}});d(this,"getVersion",async s=>{const t=await s.getAddress(),e=await s.provider.call2(t.toString(),"get_version");return{major:e[0],minor:e[1],development:X(e[2])}});d(this,"getData",async s=>{const t=await s.getAddress(),e=await s.provider.call2(t.toString(),"get_farming_minter_data"),n=w(e[14]);if(!n)throw new Error(`Failed to parse stakingTokenWallet from cell: ${e[14]}`);const o=w(e[15]);if(!o)throw new Error(`Failed to parse rewardTokenWallet from cell: ${e[15]}`);return{nextItemIndex:e[0],lastUpdateTime:e[1],status:e[2],depositedNanorewards:e[3],currentStakedTokens:e[4],accruedPerUnitNanorewards:e[5],claimedFeeNanorewards:e[6],accruedFeeNanorewards:e[7],accruedNanorewards:e[8],claimedNanorewards:e[9],contractUniqueId:e[10],nanorewardsPer24h:e[11],adminFee:e[12],minStakeTime:e[13],stakingTokenWallet:n,rewardTokenWallet:o,custodianAddress:w(e[16]),canChangeCustodian:I(e[17]),canSendRawMsg:I(e[18]),canChangeFee:I(e[19]),unrestrictedDepositRewards:I(e[20]),soulboundItems:!0}})}get gasConstants(){return{stake:new Z(3e8),stakeForward:new Z(25e7)}}}const{Address:gt,utils:{BN:H},token:{nft:{NftCollection:yt},jetton:{JettonMinter:ht,JettonWallet:ft}}}=a,tt={[q.V2]:z};class vt extends yt{constructor(t,{revision:e,...n}){super(t,n);d(this,"revision");if(typeof e=="string"){if(!tt[e])throw Error(`Unknown pool revision: ${e}`);this.revision=new tt[e]}else this.revision=e}get gasConstants(){return this.revision.gasConstants}async createStakeBody(){return this.revision.createStakeBody(this)}async getStakingJettonAddress(){const{stakingTokenWallet:t}=await this.getData(),e=new ft(this.provider,{address:t}),{jettonMinterAddress:n}=await e.getData();return n}async getPendingData(){return this.revision.getPendingData(this)}async getVersion(){return this.revision.getVersion(this)}async getData(){return this.revision.getData(this)}async buildStakeTxParams(t){const n=await new ht(this.provider,{address:t.jettonAddress}).getJettonWalletAddress(new gt(t.userWalletAddress)),o=await this.createStakeBody(),c=new H(t.forwardGasAmount??this.gasConstants.stakeForward),A=B({queryId:t.queryId??0,amount:t.jettonAmount,destination:await this.getAddress(),responseDestination:t.userWalletAddress,forwardTonAmount:c,forwardPayload:o}),u=new H(t.gasAmount??this.gasConstants.stake);return{to:n,payload:A,gasAmount:u}}}const{boc:{Cell:Bt}}=a;function et(i){const s=new Bt;return s.bits.writeUint(520377210,32),s.bits.writeUint((i==null?void 0:i.queryId)??0,64),s}const{utils:{BN:L},boc:{Cell:st}}=a;class nt{constructor(){d(this,"createClaimRewardsBody",async(s,t)=>{const e=new st;return e.bits.writeUint(_.CLAIM_REWARDS,32),e.bits.writeUint((t==null?void 0:t.queryId)??0,64),e});d(this,"createUnstakeBody",async(s,t)=>{const e=new st;return e.bits.writeUint(_.UNSTAKE,32),e.bits.writeUint((t==null?void 0:t.queryId)??0,64),e});d(this,"createDestroyBody",async(s,t)=>et({queryId:(t==null?void 0:t.queryId)??0}));d(this,"getFarmingData",async s=>{const t=await s.getAddress(),e=await s.provider.call2(t.toString(),"get_farming_data");return{status:e[0],revokeTime:e[1],stakedTokens:e[2],claimedPerUnitNanorewards:e[3],stakeDate:e[4],isSoulbound:!0}})}get gasConstants(){return{claimRewards:new L(3e8),unstake:new L(4e8),destroy:new L(5e7)}}}const{utils:{BN:F},token:{nft:{NftItem:It}}}=a,ot={[q.V2]:nt};class St extends It{constructor(t,{revision:e,...n}){super(t,n);d(this,"revision");if(typeof e=="string"){if(!ot[e])throw Error(`Unknown farm NFT item revision: ${e}`);this.revision=new ot[e]}else this.revision=e}get gasConstants(){return this.revision.gasConstants}async createClaimRewardsBody(t){return this.revision.createClaimRewardsBody(this,t)}async createDestroyBody(t){return this.revision.createDestroyBody(this,t)}async createUnstakeBody(t){return this.revision.createUnstakeBody(this,t)}async getFarmingData(){return await this.revision.getFarmingData(this)}async buildClaimRewardsTxParams(t){const e=await this.getAddress(),n=await this.createClaimRewardsBody({queryId:t==null?void 0:t.queryId}),o=new F((t==null?void 0:t.gasAmount)??this.gasConstants.claimRewards);return{to:e,payload:n,gasAmount:o}}async buildUnstakeTxParams(t){const e=await this.getAddress(),n=await this.createUnstakeBody({queryId:t==null?void 0:t.queryId}),o=new F((t==null?void 0:t.gasAmount)??this.gasConstants.unstake);return{to:e,payload:n,gasAmount:o}}async buildDestroyTxParams(t){const e=await this.getAddress(),n=await this.createDestroyBody({queryId:t==null?void 0:t.queryId}),o=new F((t==null?void 0:t.gasAmount)??this.gasConstants.destroy);return{to:e,payload:n,gasAmount:o}}}const Ct=w;r.DEX_OP_CODES=l,r.FARM_OP_CODES=_,r.FARM_REVISION=q,r.FarmNftItem=St,r.FarmNftItemRevisionV2=nt,r.FarmNftMinter=vt,r.FarmNftMinterRevisionV2=z,r.LpAccount=$,r.LpAccountRevisionV1=E,r.Pool=x,r.PoolRevisionV1=N,r.ROUTER_REVISION=R,r.ROUTER_REVISION_ADDRESS=rt,r.Router=wt,r.RouterRevisionV1=K,r.createJettonTransferMessage=B,r.createSbtDestroyMessage=et,r.parseAddress=w,r.parseAddressFromCell=Ct,r.parseBoolean=I,r.parseString=X,Object.defineProperty(r,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=index.umd.cjs.map
